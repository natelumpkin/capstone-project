from ..models import Question, Answer, User, Tag, db, SCHEMA, environment, Question_Vote
from sqlalchemy.sql.expression import func, select
from flask import jsonify
from random import choice

def seed_bulk_questions():
  user1 = User.query.filter(User.username == 'Demo1').one()
  user2 = User.query.filter(User.username == 'Demo2').one()
  user3 = User.query.filter(User.username == 'Demo3').one()

  user_array = [user1,user2,user3]

  tags = Tag.query.all()

  body1 = r"""{"blocks":[{"key":"er6qa","text":"So in C++ there is now make_from_tuple as:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"34ans","text":"T obj = std::make_from_tuple<T>( { Args... args } ); // args represents a tuple","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":79,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"3g0hl","text":"but how would one do:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"218co","text":"T* obj = std::make_new_from_tuple<T*>( { Args... args } );","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":58,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"9dp2v","text":"There is make_shared and make_unique but neither of those takes a tuple (and I'm not sure how one would extract the arguments from the tuple if that is the direction to go, as you can always make_unique then release if you want the raw pointer).","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b89fe","text":"Very simple example 1:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"35cm4","text":"struct A\n{\n    int i_; double d_; std::string s_;\n\n    A( int i, double d, const std::string& s ) : i_(i), d_(d), s_(s) {}\n};\n\nauto aTuple = std::make_tuple( 1, 1.5, std::string(\"Hello\") );","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":189,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"qrlv","text":"For a more complex example, if the tuple contains a unique_ptr you want to forward, I will want that to work too.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body2 = r"""{"blocks":[{"key":"bphko","text":"My understanding of yield from is that it is similar to yielding every item from an iterable. Yet, I observe the different behavior in the following example.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":20,"length":10,"style":"CODE"},{"offset":56,"length":5,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"2d285","text":"I have Class1","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":7,"length":6,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"6roac","text":"class Class1:\n    def __init__(self, gen):\n        self.gen = gen\n        \n    def __iter__(self):\n        for el in self.gen:\n            yield el","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":147,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"dud09","text":"and Class2 that different only in replacing yield in for loop with yield from","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":44,"length":5,"style":"CODE"},{"offset":67,"length":10,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"7n43h","text":"class Class2:\n    def __init__(self, gen):\n        self.gen = gen\n        \n    def __iter__(self):\n        yield from self.gen","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":126,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"7odeh","text":"The code below reads the first element from an instance of a given class and then reads the rest in a for loop:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6ss1k","text":"a = Class1((i for i in range(3)))\nprint(next(iter(a)))\nfor el in iter(a):\n    print(el)","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":87,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"37jgg","text":"This produces different outputs for Class1 and Class2. For Class1 the output is","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":36,"length":6,"style":"CODE"},{"offset":47,"length":6,"style":"CODE"},{"offset":59,"length":6,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"87sfj","text":"0\n1\n2","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":5,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"8q01g","text":"and for Class2 the output is","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":8,"length":6,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"cq8gn","text":"0","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":1,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"bpmks","text":"What is the mechanism behind yield from that produces different behavior?","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":29,"length":10,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body3 = r"""{"blocks":[{"key":"62r2","text":"I am using numpy==1.24.0. On running this sample code line:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":11,"length":13,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"7njso","text":"import numpy as np\nnum = np.float(3)","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":36,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"cfbem","text":"I am getting this error:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"eerea","text":"Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"/home/ubuntu/.local/lib/python3.8/site-packages/numpy/__init__.py\", line 284, in __getattr__\n    raise AttributeError(\"module {!r} has no attribute \" AttributeError: module 'numpy' has no attribute 'float'","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":286,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"a3d67","text":"Please help me on this.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body4 = r"""{"blocks":[{"key":"5k81h","text":"According to §6.3.2.3 ¶3 of the C11 standard, a null pointer constant in C can be defined by an implementation as either the integer constant expression 0 or such an expression cast to void *. In C the null pointer constant is defined by the NULL macro.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":153,"length":1,"style":"CODE"},{"offset":185,"length":6,"style":"CODE"},{"offset":242,"length":4,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"6nj2b","text":"My implementation (GCC 9.4.0) defines NULL in stddef.h in the following ways:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":38,"length":4,"style":"CODE"},{"offset":46,"length":8,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"b7jkq","text":"#define NULL ((void *)0)\n#define NULL 0","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":39,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"3lof9","text":"Why are both of the above expressions considered semantically equivalent in the context of NULL? More specifically, why do there exist two ways of expressing the same concept rather than one?","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":91,"length":4,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body5 = r"""{"blocks":[{"key":"a8jht","text":"What is the difference between the 2? __INT_MAX__ is defined without adding a library as far as I know and INT_MAX is defined in limits.h but when I include the library INT_MAX gets expanded to __INT_MAX__ either way (or so does VSCode say). Why would I ever use the limits.h one when it gets expanded to the other one?","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":38,"length":11,"style":"CODE"},{"offset":107,"length":7,"style":"CODE"},{"offset":129,"length":8,"style":"CODE"},{"offset":169,"length":7,"style":"CODE"},{"offset":194,"length":11,"style":"CODE"},{"offset":267,"length":8,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body6 = r"""{"blocks":[{"key":"d2cbf","text":"After a fresh install I could clone the repository, make changes and commits, but when I try to push I get the following warning","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"auhab","text":"warning: could not find UI helper 'GitHub.UI'","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":45,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"ecdf0","text":"After this, the process seems to still be running but gets stuck until","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"86crl","text":"I press Ctrl+C it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"arbb9","text":"I couldn't find this error online.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2sgia","text":"I can push from GitHub Desktop","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body7 = r"""{"blocks":[{"key":"2dvu2","text":"I'm a very experienced C programmer, but recently I came across some code on a mainframe that has a local variable. This is in a simple C function that declares this variable, and then strcpy / strcats two strings into it, and then tries an fopen.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":185,"length":6,"style":"CODE"},{"offset":194,"length":6,"style":"CODE"},{"offset":241,"length":5,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"94odq","text":"char foo(|10|);","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":15,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"1eash","text":"This code is very old. Possibly even K&R C old. I'm wondering if this is some obscure compiler extension or an adaptation to a keyboard that doesn't have [] or something like that.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6usp7","text":"Anyone know if this declaration is 'special'?","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4a3eq","text":"This is a standard Z/OS mainframe. I'm not sure what compiler is used.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body8 = r"""{"blocks":[{"key":"6temp","text":"I've been finding a strange behaviour of log functions in C++ and numpy about the behaviour of log function handling complex infinite numbers. Specifically, log(inf + inf * 1j) equals (inf + 0.785398j) when I expect it to be (inf + nan * 1j).","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":41,"length":3,"style":"CODE"},{"offset":95,"length":3,"style":"CODE"},{"offset":157,"length":19,"style":"CODE"},{"offset":184,"length":17,"style":"CODE"},{"offset":225,"length":16,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"3srkv","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"adbci","text":"When taking the log of a complex number, the real part is the log of the absolute value of the input and the imaginary part is the phase of the input. Returning 0.785398 as the imaginary part of log(inf + inf * 1j) means it assumes the infs in the real and the imaginary part have the same length. This assumption does not seem to be consistent with other calculation, for example, inf - inf == nan, inf / inf == nan which assumes 2 infs do not necessarily have the same values.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":195,"length":19,"style":"CODE"},{"offset":236,"length":3,"style":"CODE"},{"offset":382,"length":16,"style":"CODE"},{"offset":400,"length":16,"style":"CODE"},{"offset":433,"length":3,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"2vs7c","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7cl2r","text":"Why is the assumption for log(inf + inf * 1j) different?","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":26,"length":19,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"1o3vs","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"97sp2","text":"Reproducing C++ code:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ba54k","text":"#include <complex>\n#include <limits>\n#include <iostream>\nint main() {\n    double inf = std::numeric_limits<double>::infinity();\n    std::complex<double> b(inf, inf);\n    std::complex<double> c = std::log(b);\n    std::cout << c << \"\\n\";\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":237,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"fdhll","text":"Reproducing Python code (numpy):","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"kqfc","text":"import numpy as np\n\na = complex(float('inf'), float('inf'))\nprint(np.log(a))","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":76,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body9 = r"""{"blocks":[{"key":"3222n","text":"I need help with creating a function to return the elements that are only present in one of 3 arrays, for example","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8uo48","text":"let arr1 = ['a', 'b', 'c', 'a', 'b']\nlet arr2 = ['a', 'd', 'b', 'c']\nlet arr3 = ['f', 'c', 'a']","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":95,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"7rhdt","text":"In the three arrays above, 'd' and 'f' are found only in one of the arrays (arr2 and arr3), I need to return them.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8n0io","text":"['d','f']","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":9,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"4hcb1","text":"The arrays can be of different sizes and the returned elements must not be duplicated.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"97o4u","text":"I tried to find better alternatives, but I failed and just went with the brute force approach, looping through each array and checking if the element exists in the other two arrays, but obviously, it's really slow and hard to read.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":202,"length":6,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"e4ftc","text":"function elementsInOnlyOneArr(a1, a2, a3) {\n\n  let myArr = [];\n\n  for(let el of a1){\n    if(a2.includes(el) == false && a3.includes(el) == false && myArr.includes(el) == false){\n      myArr.push(el);\n    }\n  }\n\n  for(let el of a2){\n    if(a1.includes(el) == false && a3.includes(el) == false && myArr.includes(el) == false){\n      myArr.push(el);\n    }\n  }\n\n  for(let el of a3){\n    if(a2.includes(el) == false && a1.includes(el) == false && myArr.includes(el) == false){\n      myArr.push(el);\n    }\n  }\n\n\n  return myArr;\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":523,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body10 = r"""{"blocks":[{"key":"28kdk","text":"Can't deploy firebase functions. I have two project aliases, its working fine for the first project (dev), but not for the second (prod).","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8ujp1","text":"\nWhenever I write firebase deploy --only functions I get the following message","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":18,"length":32,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"6fni7","text":"i  deploying functions\ni  functions: ensuring required API cloudfunctions.googleapis.com is enabled...\ni  functions: ensuring required API cloudbuild.googleapis.com is enabled...\ni  artifactregistry: ensuring required API artifactregistry.googleapis.com is enabled...\n+  functions: required API cloudbuild.googleapis.com is enabled\n+  artifactregistry: required API artifactregistry.googleapis.com is enabled\n+  functions: required API cloudfunctions.googleapis.com is enabled\ni  functions: preparing codebase default for deployment\n!  functions: package.json indicates an outdated version of firebase-functions. Please upgrade \nusing npm install --save firebase-functions@latest in your functions directory.\n!  functions: Please note that there will be breaking changes when you upgrade.\ni  functions: Loaded environment variables from .env.prod.\n!  functions: You are using an old version of firebase-functions SDK (3.15.7). Please update \nfirebase-functions SDK to >=3.20.0\ni  functions: preparing functions directory for uploading...\ni  functions: packaged E:\\FlutterProjects\\pegasus\\functions (218.61 KB) for uploading\n\nError: Failed to fetch Run service undefined","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":1169,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body11 = r"""{"blocks":[{"key":"fislb","text":"I am just making a Database called Fruits from my app.js and connecting the database to MongoDB using Mongoose.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":50,"length":6,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"enbk9","text":"const mongoose = require(\"mongoose\");\n\nmongoose.connect(\"mongodb://localhost:27017/fruitsDB\", {useNewUrlParser: true});\n\nmongoose.set('strictQuery', false);\n\nconst fruitSchema = new mongoose.Schema({\n    name: String,\n    rating: Number,\n    review: String\n});\n\nconst Fruit = mongoose.model(\"Fruit\", fruitSchema);\n\nconst fruit = new Fruit({\n    name: \"Apple\",\n    rating: 7,\n    review: \"Taste Good\"\n});\n\nfruit.save();","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":418,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"9o4cm","text":"Whenever I try node app.js am getting DeprecationWarning. Even though, I tried using mongoose.set('strictQuery', true); the same error continues as follow:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":15,"length":11,"style":"CODE"},{"offset":85,"length":34,"style":"CODE"},{"offset":38,"length":18,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"coeu3","text":"(node:15848) [MONGOOSE] DeprecationWarning: Mongoose: the `strictQuery` option w\nill be switched back to `false` by default in Mongoose 7. Use `mongoose.set('str\nictQuery', false);` if you want to prepare for this change. Or use `mongoose.set\n('strictQuery', true);` to suppress this warning.\n(Use `node --trace-deprecation ...` to show where the warning was created)      \nD:\\Web Development\\FruitsProject\\node_modules\\mongoose\\lib\\drivers\\node-mongodb-\nnative\\collection.js:158\n          const err = new MongooseError(message);\n                      ^\n\nMongooseError: Operation `fruits.insertOne()` buffering timed out after 10000ms \n    at Timeout.<anonymous> (D:\\Web Development\\FruitsProject\\node_modules\\mongoo\nse\\lib\\drivers\\node-mongodb-native\\collection.js:158:23)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)\n\nNode.js v18.12.1","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":900,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"e2ktl","text":"And then the 2nd error also continues fruits.insertOne().","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":38,"length":18,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"9rfqv","text":"Because of this my MongoDB database is not getting updated.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2ob2s","text":"test> show dbs\nadmin    40.00 KiB\nconfig  108.00 KiB\nlocal    40.00 KiB\nshopDB   72.00 KiB","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":90,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"2s137","text":"I just want to fix this error. But I don't know where to fix this error. The 2nd part of error it seems like it coming from the nodule_modules itself. How can I fix this error?","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body12 = r"""{"blocks":[{"key":"9ihm5","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"23fvu","text":"When two pointers are compared, the result depends on the relative locations in the address space of the objects pointed to. If two pointers to object or incomplete types both point to the same object, or both point one past the last element of the same array object, they compare equal. If the objects pointed to are members of the same aggregate object, pointers to structure members declared later compare greater than pointers to members declared earlier in the structure, and pointers to array elements with larger subscript values compare greater than pointers to elements of the same array with lower subscript values. All pointers to members of the same union object compare equal. If the expression P points to an element of an array object and the expression Q points to the last element of the same array object, the pointer expression Q+1 compares greater than P. In all other cases, the behavior is undefined.","type":"blockquote","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bnq95","text":"If we have two pointers referencing the same type arrays and we have lengths of those arrays can we find if those arrays do not overlap without invoking a UB?","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bglqp","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8sdo0","text":"Remark: I am not interested in examples showing me that in the real life (implementation etc) it can be done. So please do not show the code (unless you can prove [standardwise] that is UB free).","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}}"""

  title_list = [
    "How to make_from_tuple on the heap?",
    "yield from vs yield in for-loop",
  "How to solve error 'numpy' has no attribute 'float' in Python?",
  "Why are there two ways of expressing NULL in C?",
  "Difference between INT_MAX and __INT_MAX__ in C",
  "Can't push from Git Bash: Could not find UI helper 'GitHub.UI'",
  "What is the meaning of char foo(|10|) in C?",
  "Why is log(inf + inf j) equal to (inf + 0.785398 j), In C++/Python/NumPy?",
"Better way to check if an element only exists in one array",
  "Can't deploy firebase functions (Failed to fetch Run service undefined)",
  "DeprecationWarning: Mongoose: the `strictQuery` option will be switched back to `false` by default",
  "Is it possible in C (not invoking UB) to check if two objects overlap?"
  ]

  abody1 = r"""{"blocks":[{"key":"enia3","text":"the way you are calculating average using reduce is wrong","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":42,"length":6,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"1v443","text":"if you know there is going to be 3 subjects always.. you can try","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"clebm","text":"{ Average: Object.values(student.sub).reduce((a, b) => (a + b))/3 }","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":67,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"bq0si","text":"if subjects length can vary","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"chrjr","text":"Average:  ( Object.values(student.sub).reduce((a, b) => (a + b)) ) / ( Object.values(student.sub).length )","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":106,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  abody2 = r"""{"blocks":[{"key":"61s7p","text":"you can use the sum of the values in student.sub to calculate the average, rather than dividing the sum by 300. For example:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7ocb2","text":"const sum = Object.values(student.sub).reduce((a, b) => a + b);\nconst average = sum / Object.values(student.sub).length;\n\nresult.push({\n  name: student.name,\n  Subject: student.sub,\n  marks: sum,\n  Average: average\n});","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":218,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  abody3 = r"""{"blocks":[{"key":"cjtpu","text":"With a sorted array, the condition data[c] >= 128 is first false for a streak of values, then becomes true for all later values. That's easy to predict. With an unsorted array, you pay for the branching cost.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":35,"length":14,"style":"CODE"},{"offset":59,"length":5,"style":"CODE"},{"offset":102,"length":4,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  abody4 = r"""{"blocks":[{"key":"95riv","text":"If you are curious about even more optimizations that can be done to this code, consider this:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"35a71","text":"Starting with the original loop:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cbgt8","text":"for (unsigned i = 0; i < 100000; ++i)\n{\n    for (unsigned j = 0; j < arraySize; ++j)\n    {\n        if (data[j] >= 128)\n            sum += data[j];\n    }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":154,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"n85u","text":"With loop interchange, we can safely change this loop to:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b6ns1","text":"for (unsigned j = 0; j < arraySize; ++j)\n{\n    for (unsigned i = 0; i < 100000; ++i)\n    {\n        if (data[j] >= 128)\n            sum += data[j];\n    }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":154,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"mlgl","text":"Then, you can see that the if conditional is constant throughout the execution of the i loop, so you can hoist the if out:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":27,"length":2,"style":"CODE"},{"offset":86,"length":1,"style":"CODE"},{"offset":115,"length":2,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"b6kcm","text":"for (unsigned j = 0; j < arraySize; ++j)\n{\n    if (data[j] >= 128)\n    {\n        for (unsigned i = 0; i < 100000; ++i)\n        {\n            sum += data[j];\n        }\n    }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":174,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"bo44i","text":"Then, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (/fp:fast is thrown, for example)","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":124,"length":8,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"30ft6","text":"for (unsigned j = 0; j < arraySize; ++j)\n{\n    if (data[j] >= 128)\n    {\n        sum += data[j] * 100000;\n    }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":113,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"2qmpl","text":"That one is 100,000 times faster than before.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  abody5 = r"""{"blocks":[{"key":"epr7g","text":"For JSON:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":0,"length":9,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"dlvp0","text":"Content-Type: application/json","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":30,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"4d9ne","text":"For JSON-P:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":0,"length":11,"style":"BOLD"}],"entityRanges":[{"offset":4,"length":6,"key":0}],"data":{}},{"key":"1rp2j","text":"Content-Type: application/javascript","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":36,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"http://en.wikipedia.org/wiki/JSONP","rel":"noreferrer","url":"http://en.wikipedia.org/wiki/JSONP"}}}}"""
  abody6 = r"""{"blocks":[{"key":"caif4","text":"To rename the current branch:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e1hu4","text":"git branch -m <newname>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":23,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"ddkeu","text":"To rename a branch while pointed to any branch:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"du6k","text":"git branch -m <oldname> <newname>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":33,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"6g8il","text":"-m is short for --move.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":0,"length":2,"style":"CODE"},{"offset":16,"length":6,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"dkuo7","text":"To push the local branch and reset the upstream branch:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6cerd","text":"git push origin -u <newname>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":28,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"cl31g","text":"To delete the remote branch:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e8654","text":"git push origin --delete <oldname>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":34,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"c829v","text":"To create a git rename alias:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":12,"length":10,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"689j0","text":"git config --global alias.rename 'branch -m'","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":44,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"erb40","text":"On Windows or another case-insensitive filesystem, use -M if there are only capitalization changes in the name. Otherwise, Git will throw a \"branch already exists\" error.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":55,"length":2,"style":"CODE"},{"offset":140,"length":23,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"44a9b","text":"git branch -M <newname>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":23,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  abody7 = r"""{"blocks":[{"key":"724il","text":"git branch -m old_branch_name new_branch_name","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":45,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"ft02l","text":"The above command will change your branch name, but you have to be very careful using the renamed branch, because it will still refer to the old upstream branch associated with it, if any.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1g5fr","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1s4nb","text":"If you want to push some changes into master after your local branch is renamed into new_branch_name (example name):","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2kus5","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"93bqm","text":"git push origin new_branch_name:master (now changes will go to master branch but your local branch name is new_branch_name)","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":0,"length":38,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  abody8 = r"""{"blocks":[{"key":"bp2mu","text":"No.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"btd9o","text":"JSON is data-only. If you include a comment, then it must be data too.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3q6ll","text":"You could have a designated data element called \"_comment\" (or something) that should be ignored by apps that use the JSON data.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":48,"length":10,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"er8bi","text":"You would probably be better having the comment in the processes that generates/receives the JSON, as they are supposed to know what the JSON data will be in advance, or at least the structure of it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4f82j","text":"But if you decided to:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dg7u4","text":"{\n   \"_comment\": \"comment text goes here...\",\n   \"glossary\": {\n      \"title\": \"example glossary\",\n      \"GlossDiv\": {\n         \"title\": \"S\",\n         \"GlossList\": {\n            \"GlossEntry\": {\n               \"ID\": \"SGML\",\n               \"SortAs\": \"SGML\",\n               \"GlossTerm\": \"Standard Generalized Markup Language\",\n               \"Acronym\": \"SGML\",\n               \"Abbrev\": \"ISO 8879:1986\",\n               \"GlossDef\": {\n                  \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\n                  \"GlossSeeAlso\": [\"GML\", \"XML\"]\n               },\n               \"GlossSee\": \"markup\"\n            }\n         }\n      }\n   }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":672,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  abody9 = r"""{"blocks":[{"key":"81pge","text":"You can use the hidden selector:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":16,"length":6,"style":"CODE"}],"entityRanges":[{"offset":16,"length":6,"key":0}],"data":{}},{"key":"cstkm","text":"// Matches all elements that are hidden\n$('element:hidden')","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":59,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"c1fhe","text":"And the visible selector:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":8,"length":7,"style":"CODE"}],"entityRanges":[{"offset":8,"length":7,"key":1}],"data":{}},{"key":"847rp","text":"// Matches all elements that are visible\n$('element:visible')","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":61,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"http://docs.jquery.com/Selectors/hidden","rel":"noreferrer","url":"http://docs.jquery.com/Selectors/hidden"}},"1":{"type":"LINK","mutability":"MUTABLE","data":{"href":"http://docs.jquery.com/Selectors/visible","rel":"noreferrer","url":"http://docs.jquery.com/Selectors/visible"}}}}"""
  abody10 = r"""{"blocks":[{"key":"9epqv","text":"None of these answers address what I understand to be the question, which is what I was searching for, \"How do I handle items that have visibility: hidden?\". Neither :visible nor :hidden will handle this, as they are both looking for display per the documentation. As far as I could determine, there is no selector to handle CSS visibility. Here is how I resolved it (standard jQuery selectors, there may be a more condensed syntax):","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":103,"length":53,"style":"ITALIC"},{"offset":136,"length":18,"style":"CODE"},{"offset":166,"length":8,"style":"CODE"},{"offset":179,"length":7,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"84ub4","text":"$(\".item\").each(function() {\n    if ($(this).css(\"visibility\") == \"hidden\") {\n        // handle non visible state\n    } else {\n        // handle visible state\n    }\n});","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":168,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  abody11 = r"""{"blocks":[{"key":"7er6h","text":"Standard \"vanilla\" JavaScript way to redirect a page","type":"header-one","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"58gg6","text":"window.location.href = 'newPage.html';","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":38,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"aqpi0","text":"Or more simply: (since window is Global)","type":"header-two","depth":0,"inlineStyleRanges":[{"offset":23,"length":6,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"1mlb1","text":"location.href = 'newPage.html';","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":31,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"ff054","text":"If you are here because you are losing HTTP_REFERER when redirecting, keep reading:(Otherwise ignore this last part)","type":"blockquote","depth":0,"inlineStyleRanges":[{"offset":0,"length":83,"style":"BOLD"},{"offset":32,"length":6,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"8k516","text":"The following section is for those using HTTP_REFERER as one of many security measures (although it isn't a great protective measure). If you're using Internet Explorer 8 or lower, these variables get lost when using any form of JavaScript page redirection (location.href, etc.).","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":41,"length":12,"style":"CODE"}],"entityRanges":[{"offset":151,"length":19,"key":0}],"data":{}},{"key":"70r8q","text":"Below we are going to implement an alternative for IE8 & lower so that we don't lose HTTP_REFERER. Otherwise, you can almost always simply use window.location.href.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":51,"length":11,"style":"BOLD"},{"offset":143,"length":20,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"cj8bc","text":"Testing against HTTP_REFERER (URL pasting, session, etc.) can help tell whether a request is legitimate. (Note: there are also ways to work-around / spoof these referrers, as noted by droop's link in the comments)","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":16,"length":12,"style":"CODE"},{"offset":58,"length":3,"style":"ITALIC"},{"offset":105,"length":108,"style":"ITALIC"},{"offset":106,"length":5,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"bkc56","text":"Simple cross-browser testing solution (fallback to window.location.href for Internet Explorer 9+ and all other browsers)","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8ger7","text":"Usage: redirect('anotherpage.aspx');","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":0,"length":36,"style":"BOLD"},{"offset":7,"length":29,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"a0nmp","text":"function redirect (url) {\n    var ua        = navigator.userAgent.toLowerCase(),\n        isIE      = ua.indexOf('msie') !== -1,\n        version   = parseInt(ua.substr(4, 2), 10);\n\n    // Internet Explorer 8 and lower\n    if (isIE && version < 9) {\n        var link = document.createElement('a');\n        link.href = url;\n        document.body.appendChild(link);\n        link.click();\n    }\n\n    // All other browsers can use the standard window.location.href (they don't lose HTTP_REFERER like Internet Explorer 8 & lower does)\n    else { \n        window.location.href = url; \n    }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":584,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"http://en.wikipedia.org/wiki/Internet_Explorer_8","rel":"noreferrer","url":"http://en.wikipedia.org/wiki/Internet_Explorer_8"}}}}"""
  abody12 = r"""{"blocks":[{"key":"afos9","text":"Yes, it was added in version 2.5. The expression syntax is:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":12,"length":5,"key":0}],"data":{}},{"key":"ff0jl","text":"a if condition else b","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":21,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"4k5qu","text":"First condition is evaluated, then exactly one of either a or b is evaluated and returned based on the Boolean value of condition. If condition evaluates to True, then a is evaluated and returned but b is ignored, or else when b is evaluated and returned but a is ignored.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":6,"length":9,"style":"CODE"},{"offset":57,"length":1,"style":"CODE"},{"offset":62,"length":1,"style":"CODE"},{"offset":120,"length":9,"style":"CODE"},{"offset":134,"length":9,"style":"CODE"},{"offset":157,"length":4,"style":"CODE"},{"offset":168,"length":1,"style":"CODE"},{"offset":200,"length":1,"style":"CODE"},{"offset":227,"length":1,"style":"CODE"},{"offset":259,"length":1,"style":"CODE"}],"entityRanges":[{"offset":103,"length":7,"key":1}],"data":{}},{"key":"daf36","text":"This allows short-circuiting because when condition is true only a is evaluated and b is not evaluated at all, but when condition is false only b is evaluated and a is not evaluated at all.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":42,"length":9,"style":"CODE"},{"offset":65,"length":1,"style":"CODE"},{"offset":84,"length":1,"style":"CODE"},{"offset":120,"length":9,"style":"CODE"},{"offset":144,"length":1,"style":"CODE"},{"offset":163,"length":1,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"er4io","text":"For example:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dqte3","text":">>> 'true' if True else 'false'\n'true'\n>>> 'true' if False else 'false'\n'false'","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":79,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"933nf","text":"Note that conditionals are an expression, not a statement. This means you can't use statements such as pass, or assignments with = (or \"augmented\" assignments like +=), within a conditional expression:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":30,"length":10,"style":"ITALIC"},{"offset":48,"length":9,"style":"ITALIC"},{"offset":84,"length":10,"style":"BOLD"},{"offset":190,"length":10,"style":"BOLD"},{"offset":103,"length":4,"style":"CODE"},{"offset":129,"length":1,"style":"CODE"},{"offset":164,"length":2,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"1qmhe","text":">>> pass if False else pass\n  File \"<stdin>\", line 1\n    pass if False else pass\n         ^\nSyntaxError: invalid syntax\n\n>>> # Python parses this as `x = (1 if False else y) = 2`\n>>> # The `(1 if False else x)` part is actually valid, but\n>>> # it can't be on the left-hand side of `=`.\n>>> x = 1 if False else y = 2\n  File \"<stdin>\", line 1\nSyntaxError: cannot assign to conditional expression\n\n>>> # If we parenthesize it instead...\n>>> (x = 1) if False else (y = 2)\n  File \"<stdin>\", line 1\n    (x = 1) if False else (y = 2)\n       ^\nSyntaxError: invalid syntax","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":564,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"1rf79","text":"(In 3.8 and above, the := \"walrus\" operator allows simple assignment of values as an expression, which is then compatible with this syntax. But please don't write code like that; it will quickly become very difficult to understand.)","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":23,"length":2,"style":"CODE"},{"offset":79,"length":16,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"ba11d","text":"Similarly, because it is an expression, the else part is mandatory:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":44,"length":4,"style":"CODE"},{"offset":57,"length":9,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"7j3iv","text":"# Invalid syntax: we didn't specify what the value should be if the \n# condition isn't met. It doesn't matter if we can verify that\n# ahead of time.\na if True","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":158,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"abqsu","text":"You can, however, use conditional expressions to assign a variable like so:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"j2m3","text":"x = a if True else b","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":20,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"o5b7","text":"Or for example to return a value:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fn3u3","text":"# Of course we should just use the standard library `max`;\n# this is just for demonstration purposes.\ndef my_max(a, b):\n    return a if a > b else b","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":148,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"6u6pt","text":"Think of the conditional expression as switching between two values. We can use it when we are in a 'one value or another' situation, where we will do the same thing with the result, regardless of whether the condition is met. We use the expression to compute the value, and then do something with it. If you need to do something different depending on the condition, then use a normal if statement instead.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":148,"length":17,"style":"ITALIC"},{"offset":317,"length":22,"style":"ITALIC"},{"offset":386,"length":2,"style":"CODE"},{"offset":389,"length":9,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"4pq9j","text":"Keep in mind that it's frowned upon by some Pythonistas for several reasons:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7rf66","text":"The order of the arguments is different from those of the classic condition ? a : b ternary operator from many other languages (such as C, C++, Go, Perl, Ruby, Java, JavaScript, etc.), which may lead to bugs when people unfamiliar with Python's \"surprising\" behaviour use it (they may reverse the argument order).","type":"unordered-list-item","depth":0,"inlineStyleRanges":[{"offset":66,"length":17,"style":"CODE"}],"entityRanges":[{"offset":136,"length":1,"key":2},{"offset":139,"length":3,"key":3},{"offset":144,"length":2,"key":4},{"offset":148,"length":4,"key":5},{"offset":154,"length":4,"key":6},{"offset":160,"length":4,"key":7},{"offset":166,"length":10,"key":8}],"data":{}},{"key":"c80s5","text":"Some find it \"unwieldy\", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"et05g","text":"Stylistic reasons. (Although the 'inline if' can be really useful, and make your script more concise, it really does complicate your code)","type":"unordered-list-item","depth":0,"inlineStyleRanges":[{"offset":41,"length":2,"style":"CODE"},{"offset":52,"length":6,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"43avu","text":"If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, x = 4 if b > 8 else 9 is read aloud as x will be 4 if b is greater than 8 otherwise 9.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":129,"length":21,"style":"CODE"},{"offset":168,"length":46,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://mail.python.org/pipermail/python-dev/2005-September/056846.html","rel":"noreferrer","title":"[Python-Dev] Conditional Expression Resolution","url":"https://mail.python.org/pipermail/python-dev/2005-September/056846.html"}},"1":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/Boolean_data_type","rel":"noreferrer","title":"Boolean data type","url":"https://en.wikipedia.org/wiki/Boolean_data_type"}},"2":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/C_%28programming_language%29","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/C_%28programming_language%29"}},"3":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/C%2B%2B","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/C%2B%2B"}},"4":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/Go_%28programming_language%29","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/Go_%28programming_language%29"}},"5":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/Perl","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/Perl"}},"6":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/Ruby_%28programming_language%29","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/Ruby_%28programming_language%29"}},"7":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/Java_%28programming_language%29","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/Java_%28programming_language%29"}},"8":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/JavaScript","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/JavaScript"}}}}"""



  body_list = [body1, body2, body3, body4, body5, body6, body7, body8, body9, body10, body11, body12]
  lorem_body = r"""
        {"blocks":[{"key":"a8qum","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ","type":"header-one","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"458ti","text":"Orci nulla pellentesque dignissim enim sit amet. Id nibh tortor id aliquet lectus proin nibh. Vestibulum morbi blandit cursus risus at ultrices mi tempus. Malesuada fames ac turpis egestas sed.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fl75r","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ai0h9","text":" Nisi porta lorem mollis aliquam. ","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"97n0n","text":"Ultricies mi eget mauris pharetra et ultrices. ","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fgmir","text":"Diam maecenas ultricies mi eget. ","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2jb0c","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"49qh7","text":"Eget aliquet nibh praesent tristique magna sit. Sit amet massa vitae tortor condimentum. Nec tincidunt praesent semper feugiat nibh. Semper viverra nam libero justo. Eu sem integer vitae justo eget magna fermentum. Ut aliquam purus sit amet luctus. Eget mauris pharetra et ultrices. Consectetur lorem donec massa sapien faucibus et molestie ac feugiat. Dui accumsan sit amet nulla facilisi morbi. Ut aliquam purus sit amet luctus venenatis lectus magna fringilla. Viverra maecenas accumsan lacus vel facilisis. Massa enim nec dui nunc mattis enim ut tellus.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"175gt","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5t1fg","text":"Proin sagittis nisl rhoncus mattis rhoncus urna. Malesuada fames ac turpis egestas maecenas pharetra convallis posuere. Scelerisque in dictum non consectetur a erat nam. Tellus cras adipiscing enim eu turpis egestas pretium aenean. Nibh ipsum consequat nisl vel pretium lectus. Ipsum consequat nisl vel pretium lectus quam id leo. Viverra maecenas accumsan lacus vel facilisis volutpat est velit egestas. Pulvinar neque laoreet suspendisse interdum consectetur libero. Scelerisque varius morbi enim nunc faucibus. Lacus vestibulum sed arcu non odio euismod lacinia at quis. Netus et malesuada fames ac turpis. Netus et malesuada fames ac turpis egestas integer.","type":"code-block","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5r6vg","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"alpe9","text":"Mattis ullamcorper velit sed ullamcorper morbi. Lacus vel facilisis volutpat est velit egestas dui. Tincidunt tortor aliquam nulla facilisi cras fermentum. Rutrum tellus pellentesque eu tincidunt tortor. Iaculis urna id volutpat lacus laoreet non curabitur gravida. Nulla facilisi cras fermentum odio eu feugiat pretium. Rhoncus aenean vel elit scelerisque mauris pellentesque pulvinar. Imperdiet sed euismod nisi porta lorem. Massa tincidunt dui ut ornare lectus sit. Maecenas accumsan lacus vel facilisis volutpat est velit egestas dui.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}}
        """
  answer_body_list = [abody1, abody2, abody3, abody4, abody5, abody6, abody7, abody8, abody9, abody10, abody11, abody12]

  # tag1 = Tag.query.filter(Tag.tag == 'python').one()
  # tag2 = Tag.query.filter(Tag.tag == 'javascript').one()
  # tag3 = Tag.query.filter(Tag.tag == 'reactjs').one()
  # tag4 = Tag.query.filter(Tag.tag == 'reactjs').one()
  # tag5 = Tag.query.filter(Tag.tag == 'reactjs').one()
  # tag6 = Tag.query.filter(Tag.tag == 'reactjs').one()
  # tag7 = Tag.query.filter(Tag.tag == 'python').one()
  # tag8 = Tag.query.filter(Tag.tag == 'javascript').one()
  # tag9 = Tag.query.filter(Tag.tag == 'reactjs').one()
  # tag10 = Tag.query.filter(Tag.tag == 'reactjs').one()
  # tag11 = Tag.query.filter(Tag.tag == 'reactjs').one()
  # tag12 = Tag.query.filter(Tag.tag == 'reactjs').one()


  # question1 = Question(user_id=user1.id, title="How to make_from_tuple on the heap?", body=body1)



  question_array = []

  for user in user_array:
    i = 0
    while i < 1000:
      question = Question(
        user_id=user.id,
        title=choice(title_list),
        body=choice(body_list)
      )
      tag = choice(tags)
      question.tags.append(tag)
      db.session.add(question)
      # for other_user in user_array:
      #   if other_user.id != user.id:
      #     vote = Question_Vote(user_id=other_user.id, question_id=question.id, vote=choice([1,0]))
      #     db.session.add(vote)
      i += 1

  # db.session.add(question1)
  db.session.commit()

def undo_questions():
  if environment == "production":
        db.session.execute(f"TRUNCATE table {SCHEMA}.questions RESTART IDENTITY CASCADE;")
  else:
      db.session.execute("DELETE FROM questions")

  db.session.commit()
