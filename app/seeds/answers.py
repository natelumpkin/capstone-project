from ..models import Answer, Question, User, db, SCHEMA, environment
from flask import jsonify

def seed_answers():
  user1 = User.query.filter(User.username == 'Demo1').first()
  user2 = User.query.filter(User.username == 'Demo2').first()
  user3 = User.query.filter(User.username == 'Demo3').first()
  question1 = Question.query.filter(Question.title == "How to make_from_tuple on the heap?").first()
  question2 = Question.query.filter(Question.title == "yield from vs yield in for-loop").first()
  question3 = Question.query.filter(Question.title == "How to solve error 'numpy' has no attribute 'float' in Python?").first()
  question4 = Question.query.filter(Question.title == "Why are there two ways of expressing NULL in C?").first()
  question5 = Question.query.filter(Question.title == "Difference between INT_MAX and __INT_MAX__ in C").first()
  question6 = Question.query.filter(Question.title == "Can't push from Git Bash: Could not find UI helper 'GitHub.UI'").first()
  question7 = Question.query.filter(Question.title == "What is the meaning of char foo(|10|) in C?").first()
  question8 = Question.query.filter(Question.title == "Why is log(inf + inf j) equal to (inf + 0.785398 j), In C++/Python/NumPy?").first()
  question9 = Question.query.filter(Question.title == "Better way to check if an element only exists in one array").first()
  question10 = Question.query.filter(Question.title == "Can't deploy firebase functions (Failed to fetch Run service undefined)").first()
  question11 = Question.query.filter(Question.title == "DeprecationWarning: Mongoose: the `strictQuery` option will be switched back to `false` by default").first()
  question12 = Question.query.filter(Question.title == "Is it possible in C (not invoking UB) to check if two objects overlap?").first()

  question1id = question1.id
  question2id = question2.id

  body1 = r"""{"blocks":[{"key":"enia3","text":"the way you are calculating average using reduce is wrong","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":42,"length":6,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"1v443","text":"if you know there is going to be 3 subjects always.. you can try","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"clebm","text":"{ Average: Object.values(student.sub).reduce((a, b) => (a + b))/3 }","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":67,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"bq0si","text":"if subjects length can vary","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"chrjr","text":"Average:  ( Object.values(student.sub).reduce((a, b) => (a + b)) ) / ( Object.values(student.sub).length )","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":106,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body2 = r"""{"blocks":[{"key":"61s7p","text":"you can use the sum of the values in student.sub to calculate the average, rather than dividing the sum by 300. For example:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7ocb2","text":"const sum = Object.values(student.sub).reduce((a, b) => a + b);\nconst average = sum / Object.values(student.sub).length;\n\nresult.push({\n  name: student.name,\n  Subject: student.sub,\n  marks: sum,\n  Average: average\n});","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":218,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body3 = r"""{"blocks":[{"key":"cjtpu","text":"With a sorted array, the condition data[c] >= 128 is first false for a streak of values, then becomes true for all later values. That's easy to predict. With an unsorted array, you pay for the branching cost.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":35,"length":14,"style":"CODE"},{"offset":59,"length":5,"style":"CODE"},{"offset":102,"length":4,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body4 = r"""{"blocks":[{"key":"95riv","text":"If you are curious about even more optimizations that can be done to this code, consider this:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"35a71","text":"Starting with the original loop:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cbgt8","text":"for (unsigned i = 0; i < 100000; ++i)\n{\n    for (unsigned j = 0; j < arraySize; ++j)\n    {\n        if (data[j] >= 128)\n            sum += data[j];\n    }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":154,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"n85u","text":"With loop interchange, we can safely change this loop to:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b6ns1","text":"for (unsigned j = 0; j < arraySize; ++j)\n{\n    for (unsigned i = 0; i < 100000; ++i)\n    {\n        if (data[j] >= 128)\n            sum += data[j];\n    }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":154,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"mlgl","text":"Then, you can see that the if conditional is constant throughout the execution of the i loop, so you can hoist the if out:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":27,"length":2,"style":"CODE"},{"offset":86,"length":1,"style":"CODE"},{"offset":115,"length":2,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"b6kcm","text":"for (unsigned j = 0; j < arraySize; ++j)\n{\n    if (data[j] >= 128)\n    {\n        for (unsigned i = 0; i < 100000; ++i)\n        {\n            sum += data[j];\n        }\n    }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":174,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"bo44i","text":"Then, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (/fp:fast is thrown, for example)","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":124,"length":8,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"30ft6","text":"for (unsigned j = 0; j < arraySize; ++j)\n{\n    if (data[j] >= 128)\n    {\n        sum += data[j] * 100000;\n    }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":113,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"2qmpl","text":"That one is 100,000 times faster than before.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body5 = r"""{"blocks":[{"key":"epr7g","text":"For JSON:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":0,"length":9,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"dlvp0","text":"Content-Type: application/json","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":30,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"4d9ne","text":"For JSON-P:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":0,"length":11,"style":"BOLD"}],"entityRanges":[{"offset":4,"length":6,"key":0}],"data":{}},{"key":"1rp2j","text":"Content-Type: application/javascript","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":36,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"http://en.wikipedia.org/wiki/JSONP","rel":"noreferrer","url":"http://en.wikipedia.org/wiki/JSONP"}}}}"""
  body6 = r"""{"blocks":[{"key":"caif4","text":"To rename the current branch:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e1hu4","text":"git branch -m <newname>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":23,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"ddkeu","text":"To rename a branch while pointed to any branch:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"du6k","text":"git branch -m <oldname> <newname>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":33,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"6g8il","text":"-m is short for --move.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":0,"length":2,"style":"CODE"},{"offset":16,"length":6,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"dkuo7","text":"To push the local branch and reset the upstream branch:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6cerd","text":"git push origin -u <newname>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":28,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"cl31g","text":"To delete the remote branch:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e8654","text":"git push origin --delete <oldname>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":34,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"c829v","text":"To create a git rename alias:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":12,"length":10,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"689j0","text":"git config --global alias.rename 'branch -m'","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":44,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"erb40","text":"On Windows or another case-insensitive filesystem, use -M if there are only capitalization changes in the name. Otherwise, Git will throw a \"branch already exists\" error.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":55,"length":2,"style":"CODE"},{"offset":140,"length":23,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"44a9b","text":"git branch -M <newname>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":23,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body7 = r"""{"blocks":[{"key":"724il","text":"git branch -m old_branch_name new_branch_name","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":45,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"ft02l","text":"The above command will change your branch name, but you have to be very careful using the renamed branch, because it will still refer to the old upstream branch associated with it, if any.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1g5fr","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1s4nb","text":"If you want to push some changes into master after your local branch is renamed into new_branch_name (example name):","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2kus5","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"93bqm","text":"git push origin new_branch_name:master (now changes will go to master branch but your local branch name is new_branch_name)","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":0,"length":38,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body8 = r"""{"blocks":[{"key":"bp2mu","text":"No.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"btd9o","text":"JSON is data-only. If you include a comment, then it must be data too.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3q6ll","text":"You could have a designated data element called \"_comment\" (or something) that should be ignored by apps that use the JSON data.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":48,"length":10,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"er8bi","text":"You would probably be better having the comment in the processes that generates/receives the JSON, as they are supposed to know what the JSON data will be in advance, or at least the structure of it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4f82j","text":"But if you decided to:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dg7u4","text":"{\n   \"_comment\": \"comment text goes here...\",\n   \"glossary\": {\n      \"title\": \"example glossary\",\n      \"GlossDiv\": {\n         \"title\": \"S\",\n         \"GlossList\": {\n            \"GlossEntry\": {\n               \"ID\": \"SGML\",\n               \"SortAs\": \"SGML\",\n               \"GlossTerm\": \"Standard Generalized Markup Language\",\n               \"Acronym\": \"SGML\",\n               \"Abbrev\": \"ISO 8879:1986\",\n               \"GlossDef\": {\n                  \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\n                  \"GlossSeeAlso\": [\"GML\", \"XML\"]\n               },\n               \"GlossSee\": \"markup\"\n            }\n         }\n      }\n   }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":672,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body9 = r"""{"blocks":[{"key":"81pge","text":"You can use the hidden selector:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":16,"length":6,"style":"CODE"}],"entityRanges":[{"offset":16,"length":6,"key":0}],"data":{}},{"key":"cstkm","text":"// Matches all elements that are hidden\n$('element:hidden')","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":59,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"c1fhe","text":"And the visible selector:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":8,"length":7,"style":"CODE"}],"entityRanges":[{"offset":8,"length":7,"key":1}],"data":{}},{"key":"847rp","text":"// Matches all elements that are visible\n$('element:visible')","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":61,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"http://docs.jquery.com/Selectors/hidden","rel":"noreferrer","url":"http://docs.jquery.com/Selectors/hidden"}},"1":{"type":"LINK","mutability":"MUTABLE","data":{"href":"http://docs.jquery.com/Selectors/visible","rel":"noreferrer","url":"http://docs.jquery.com/Selectors/visible"}}}}"""
  body10 = r"""{"blocks":[{"key":"9epqv","text":"None of these answers address what I understand to be the question, which is what I was searching for, \"How do I handle items that have visibility: hidden?\". Neither :visible nor :hidden will handle this, as they are both looking for display per the documentation. As far as I could determine, there is no selector to handle CSS visibility. Here is how I resolved it (standard jQuery selectors, there may be a more condensed syntax):","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":103,"length":53,"style":"ITALIC"},{"offset":136,"length":18,"style":"CODE"},{"offset":166,"length":8,"style":"CODE"},{"offset":179,"length":7,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"84ub4","text":"$(\".item\").each(function() {\n    if ($(this).css(\"visibility\") == \"hidden\") {\n        // handle non visible state\n    } else {\n        // handle visible state\n    }\n});","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":168,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{}}"""
  body11 = r"""{"blocks":[{"key":"7er6h","text":"Standard \"vanilla\" JavaScript way to redirect a page","type":"header-one","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"58gg6","text":"window.location.href = 'newPage.html';","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":38,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"aqpi0","text":"Or more simply: (since window is Global)","type":"header-two","depth":0,"inlineStyleRanges":[{"offset":23,"length":6,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"1mlb1","text":"location.href = 'newPage.html';","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":31,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"ff054","text":"If you are here because you are losing HTTP_REFERER when redirecting, keep reading:(Otherwise ignore this last part)","type":"blockquote","depth":0,"inlineStyleRanges":[{"offset":0,"length":83,"style":"BOLD"},{"offset":32,"length":6,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"8k516","text":"The following section is for those using HTTP_REFERER as one of many security measures (although it isn't a great protective measure). If you're using Internet Explorer 8 or lower, these variables get lost when using any form of JavaScript page redirection (location.href, etc.).","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":41,"length":12,"style":"CODE"}],"entityRanges":[{"offset":151,"length":19,"key":0}],"data":{}},{"key":"70r8q","text":"Below we are going to implement an alternative for IE8 & lower so that we don't lose HTTP_REFERER. Otherwise, you can almost always simply use window.location.href.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":51,"length":11,"style":"BOLD"},{"offset":143,"length":20,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"cj8bc","text":"Testing against HTTP_REFERER (URL pasting, session, etc.) can help tell whether a request is legitimate. (Note: there are also ways to work-around / spoof these referrers, as noted by droop's link in the comments)","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":16,"length":12,"style":"CODE"},{"offset":58,"length":3,"style":"ITALIC"},{"offset":105,"length":108,"style":"ITALIC"},{"offset":106,"length":5,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"bkc56","text":"Simple cross-browser testing solution (fallback to window.location.href for Internet Explorer 9+ and all other browsers)","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8ger7","text":"Usage: redirect('anotherpage.aspx');","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":0,"length":36,"style":"BOLD"},{"offset":7,"length":29,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"a0nmp","text":"function redirect (url) {\n    var ua        = navigator.userAgent.toLowerCase(),\n        isIE      = ua.indexOf('msie') !== -1,\n        version   = parseInt(ua.substr(4, 2), 10);\n\n    // Internet Explorer 8 and lower\n    if (isIE && version < 9) {\n        var link = document.createElement('a');\n        link.href = url;\n        document.body.appendChild(link);\n        link.click();\n    }\n\n    // All other browsers can use the standard window.location.href (they don't lose HTTP_REFERER like Internet Explorer 8 & lower does)\n    else { \n        window.location.href = url; \n    }\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":584,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"http://en.wikipedia.org/wiki/Internet_Explorer_8","rel":"noreferrer","url":"http://en.wikipedia.org/wiki/Internet_Explorer_8"}}}}"""
  body12 = r"""{"blocks":[{"key":"afos9","text":"Yes, it was added in version 2.5. The expression syntax is:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":12,"length":5,"key":0}],"data":{}},{"key":"ff0jl","text":"a if condition else b","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":21,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"4k5qu","text":"First condition is evaluated, then exactly one of either a or b is evaluated and returned based on the Boolean value of condition. If condition evaluates to True, then a is evaluated and returned but b is ignored, or else when b is evaluated and returned but a is ignored.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":6,"length":9,"style":"CODE"},{"offset":57,"length":1,"style":"CODE"},{"offset":62,"length":1,"style":"CODE"},{"offset":120,"length":9,"style":"CODE"},{"offset":134,"length":9,"style":"CODE"},{"offset":157,"length":4,"style":"CODE"},{"offset":168,"length":1,"style":"CODE"},{"offset":200,"length":1,"style":"CODE"},{"offset":227,"length":1,"style":"CODE"},{"offset":259,"length":1,"style":"CODE"}],"entityRanges":[{"offset":103,"length":7,"key":1}],"data":{}},{"key":"daf36","text":"This allows short-circuiting because when condition is true only a is evaluated and b is not evaluated at all, but when condition is false only b is evaluated and a is not evaluated at all.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":42,"length":9,"style":"CODE"},{"offset":65,"length":1,"style":"CODE"},{"offset":84,"length":1,"style":"CODE"},{"offset":120,"length":9,"style":"CODE"},{"offset":144,"length":1,"style":"CODE"},{"offset":163,"length":1,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"er4io","text":"For example:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dqte3","text":">>> 'true' if True else 'false'\n'true'\n>>> 'true' if False else 'false'\n'false'","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":79,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"933nf","text":"Note that conditionals are an expression, not a statement. This means you can't use statements such as pass, or assignments with = (or \"augmented\" assignments like +=), within a conditional expression:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":30,"length":10,"style":"ITALIC"},{"offset":48,"length":9,"style":"ITALIC"},{"offset":84,"length":10,"style":"BOLD"},{"offset":190,"length":10,"style":"BOLD"},{"offset":103,"length":4,"style":"CODE"},{"offset":129,"length":1,"style":"CODE"},{"offset":164,"length":2,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"1qmhe","text":">>> pass if False else pass\n  File \"<stdin>\", line 1\n    pass if False else pass\n         ^\nSyntaxError: invalid syntax\n\n>>> # Python parses this as `x = (1 if False else y) = 2`\n>>> # The `(1 if False else x)` part is actually valid, but\n>>> # it can't be on the left-hand side of `=`.\n>>> x = 1 if False else y = 2\n  File \"<stdin>\", line 1\nSyntaxError: cannot assign to conditional expression\n\n>>> # If we parenthesize it instead...\n>>> (x = 1) if False else (y = 2)\n  File \"<stdin>\", line 1\n    (x = 1) if False else (y = 2)\n       ^\nSyntaxError: invalid syntax","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":564,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"1rf79","text":"(In 3.8 and above, the := \"walrus\" operator allows simple assignment of values as an expression, which is then compatible with this syntax. But please don't write code like that; it will quickly become very difficult to understand.)","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":23,"length":2,"style":"CODE"},{"offset":79,"length":16,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"ba11d","text":"Similarly, because it is an expression, the else part is mandatory:","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":44,"length":4,"style":"CODE"},{"offset":57,"length":9,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"7j3iv","text":"# Invalid syntax: we didn't specify what the value should be if the \n# condition isn't met. It doesn't matter if we can verify that\n# ahead of time.\na if True","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":158,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"abqsu","text":"You can, however, use conditional expressions to assign a variable like so:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"j2m3","text":"x = a if True else b","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":20,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"o5b7","text":"Or for example to return a value:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fn3u3","text":"# Of course we should just use the standard library `max`;\n# this is just for demonstration purposes.\ndef my_max(a, b):\n    return a if a > b else b","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":148,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"6u6pt","text":"Think of the conditional expression as switching between two values. We can use it when we are in a 'one value or another' situation, where we will do the same thing with the result, regardless of whether the condition is met. We use the expression to compute the value, and then do something with it. If you need to do something different depending on the condition, then use a normal if statement instead.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":148,"length":17,"style":"ITALIC"},{"offset":317,"length":22,"style":"ITALIC"},{"offset":386,"length":2,"style":"CODE"},{"offset":389,"length":9,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"4pq9j","text":"Keep in mind that it's frowned upon by some Pythonistas for several reasons:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7rf66","text":"The order of the arguments is different from those of the classic condition ? a : b ternary operator from many other languages (such as C, C++, Go, Perl, Ruby, Java, JavaScript, etc.), which may lead to bugs when people unfamiliar with Python's \"surprising\" behaviour use it (they may reverse the argument order).","type":"unordered-list-item","depth":0,"inlineStyleRanges":[{"offset":66,"length":17,"style":"CODE"}],"entityRanges":[{"offset":136,"length":1,"key":2},{"offset":139,"length":3,"key":3},{"offset":144,"length":2,"key":4},{"offset":148,"length":4,"key":5},{"offset":154,"length":4,"key":6},{"offset":160,"length":4,"key":7},{"offset":166,"length":10,"key":8}],"data":{}},{"key":"c80s5","text":"Some find it \"unwieldy\", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"et05g","text":"Stylistic reasons. (Although the 'inline if' can be really useful, and make your script more concise, it really does complicate your code)","type":"unordered-list-item","depth":0,"inlineStyleRanges":[{"offset":41,"length":2,"style":"CODE"},{"offset":52,"length":6,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"43avu","text":"If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, x = 4 if b > 8 else 9 is read aloud as x will be 4 if b is greater than 8 otherwise 9.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":129,"length":21,"style":"CODE"},{"offset":168,"length":46,"style":"CODE"}],"entityRanges":[],"data":{}}],"entityMap":{"0":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://mail.python.org/pipermail/python-dev/2005-September/056846.html","rel":"noreferrer","title":"[Python-Dev] Conditional Expression Resolution","url":"https://mail.python.org/pipermail/python-dev/2005-September/056846.html"}},"1":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/Boolean_data_type","rel":"noreferrer","title":"Boolean data type","url":"https://en.wikipedia.org/wiki/Boolean_data_type"}},"2":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/C_%28programming_language%29","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/C_%28programming_language%29"}},"3":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/C%2B%2B","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/C%2B%2B"}},"4":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/Go_%28programming_language%29","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/Go_%28programming_language%29"}},"5":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/Perl","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/Perl"}},"6":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/Ruby_%28programming_language%29","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/Ruby_%28programming_language%29"}},"7":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/Java_%28programming_language%29","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/Java_%28programming_language%29"}},"8":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://en.wikipedia.org/wiki/JavaScript","rel":"noreferrer","url":"https://en.wikipedia.org/wiki/JavaScript"}}}}"""

  answer1 = Answer(user_id=user1.id, question_id=question1id, answer=body1)
  answer2 = Answer(user_id=user2.id, question_id=question2id, answer=body2)
  answer3 = Answer(user_id=user3.id, question_id=question2id, answer=body3)
  answer4 = Answer(user_id=user1.id, question_id=question3.id, answer=body4)
  answer5 = Answer(user_id=user1.id, question_id=question3.id, answer=body5)
  answer6 = Answer(user_id=user1.id, question_id=question3.id, answer=body6)
  answer7 = Answer(user_id=user2.id, question_id=question4.id, answer=body7)
  answer8 = Answer(user_id=user2.id, question_id=question5.id, answer=body8)
  answer9 = Answer(user_id=user2.id, question_id=question5.id, answer=body9)
  answer10 = Answer(user_id=user3.id, question_id=question6.id, answer=body10)
  answer11 = Answer(user_id=user3.id, question_id=question6.id, answer=body11)
  answer12 = Answer(user_id=user3.id, question_id=question6.id, answer=body12)
  answer13 = Answer(user_id=user1.id, question_id=question6.id, answer=body1)
  answer14 = Answer(user_id=user1.id, question_id=question7.id, answer=body2)
  answer15 = Answer(user_id=user1.id, question_id=question9.id, answer=body3)
  answer16 = Answer(user_id=user2.id, question_id=question9.id, answer=body4)
  answer17 = Answer(user_id=user2.id, question_id=question9.id, answer=body5)
  answer18 = Answer(user_id=user2.id, question_id=question10.id, answer=body6)
  answer19 = Answer(user_id=user3.id, question_id=question10.id, answer=body7)
  answer20 = Answer(user_id=user3.id, question_id=question10.id, answer=body8)
  answer21 = Answer(user_id=user3.id, question_id=question11.id, answer=body9)
  answer22 = Answer(user_id=user3.id, question_id=question11.id, answer=body10)
  answer23 = Answer(user_id=user3.id, question_id=question12.id, answer=body11)
  answer24 = Answer(user_id=user3.id, question_id=question12.id, answer=body12)

  db.session.add(answer1)
  db.session.add(answer2)
  db.session.add(answer3)
  db.session.add(answer4)
  db.session.add(answer5)
  db.session.add(answer6)
  db.session.add(answer7)
  db.session.add(answer8)
  db.session.add(answer9)
  db.session.add(answer10)
  db.session.add(answer11)
  db.session.add(answer12)
  db.session.add(answer13)
  db.session.add(answer14)
  db.session.add(answer15)
  db.session.add(answer16)
  db.session.add(answer17)
  db.session.add(answer18)
  db.session.add(answer19)
  db.session.add(answer20)
  db.session.add(answer21)
  db.session.add(answer22)
  db.session.add(answer23)
  db.session.add(answer24)
  db.session.commit()

def undo_answers():
  if environment == "production":
        db.session.execute(f"TRUNCATE table {SCHEMA}.answers RESTART IDENTITY CASCADE;")
  else:
      db.session.execute("DELETE FROM answers")

  db.session.commit()
