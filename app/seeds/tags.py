from ..models import Question, Tag, db, SCHEMA, environment
from flask import jsonify

def seed_tags():
  # question1 = Question.query.filter(Question.title == "How to make_from_tuple on the heap?").one()
  # question2 = Question.query.filter(Question.title == "yield from vs yield in for-loop").one()
  # question3 = Question.query.filter(Question.title == "How to solve error 'numpy' has no attribute 'float' in Python?").one()
  # question4 = Question.query.filter(Question.title == "Why are there two ways of expressing NULL in C?").one()
  # question5 = Question.query.filter(Question.title == "Difference between INT_MAX and __INT_MAX__ in C").one()
  # question6 = Question.query.filter(Question.title == "Can't push from Git Bash: Could not find UI helper 'GitHub.UI'").one()
  # question7 = Question.query.filter(Question.title == "What is the meaning of char foo(|10|) in C?").one()
  # question8 = Question.query.filter(Question.title == "Why is log(inf + inf j) equal to (inf + 0.785398 j), In C++/Python/NumPy?").one()
  # question9 = Question.query.filter(Question.title == "Better way to check if an element only exists in one array").one()
  # question10 = Question.query.filter(Question.title == "Can't deploy firebase functions (Failed to fetch Run service undefined)").one()
  # question11 = Question.query.filter(Question.title == "DeprecationWarning: Mongoose: the `strictQuery` option will be switched back to `false` by default").one()
  # question12 = Question.query.filter(Question.title == "Is it possible in C (not invoking UB) to check if two objects overlap?").one()


  tag1 = Tag(tag="python", description="Python is a multi-paradigm, dynamically typed, multi-purpose programming language. It is designed to be quick to learn, understand, and use, and enforces a clean and uniform syntax.")
  tag2 = Tag(tag="javascript", description="For questions about programming in ECMAScript (JavaScript/JS) and its different dialects/implementations (except for ActionScript). Keep in mind that JavaScript is NOT the same as Java!")
  tag3 = Tag(tag="reactjs", description="React is a JavaScript library for building user interfaces. It uses a declarative, component-based paradigm and aims to be efficient and flexible.")
  tag4 = Tag(tag="react-router", description="React Router - A complete routing library for React inspired by Ember's routing system")
  tag5 = Tag(tag="c", description="C is a general-purpose programming language used for system programming (OS and embedded), libraries, games and cross-platform. This tag should be used with general questions concerning the C language, as defined in the ISO 9899 standard (the latest version, 9899:2018, unless otherwise specified â€” also tag version-specific requests with c89, c99, c11, etc). C is distinct from C++ and it should not be combined with the C++ tag without a specific reason.")
  tag6 = Tag(tag="null", description="Null means *nothing* or *unknown*, depending on context. Please use the \"sql-null\" tag for SQL specific questions.")
  tag7 = Tag(tag="git", description="Git is an open-source distributed version control system (DVCS). Use this tag for questions about Git usage and workflows. Do not use this tag for general programming questions that happen to involve a Git repository. Do not use this tag for GitHub/GitHub Actions questions that do not involve git usage; use [github] or [github-actions] instead. Do not use the [github] tag for Git-related issues just because a repository happens to be hosted on GitHub.")
  tag8 = Tag(tag="mainframe", description="The mainframe tag refers to the class of \"big iron\" computers, primarily those from IBM. Currently this is limited to the IBM Z hardware, typically running z/OS, z/VM, z/VSE, z/TPF, or a distribution of Linux on IBM Z as its operating system.")
  tag9 = Tag(tag="c++", description="C++ is a general-purpose programming language. Initially, it was designed as an extension to C and has a similar syntax, but it is now a completely different language. Use this tag for questions about code (to be) compiled with a C++ compiler. Use a version-specific tag for questions related to a specific standard revision [C++11], [C++14], [C++17], [C++20], or [C++23], etc.")
  tag10 = Tag(tag="memory-leaks", description="A memory leak occurs when a program fails to release memory that it has allocated but is no longer using and is not recoverable.")
  tag11 = Tag(tag="canvas", description="Canvas is a generic term for the drawing surface used with many free-form graphics output APIs. Use this tag with other tags that indicate the specific graphics API that is being used along with the programming language and the target environment: [android], [uwp], [wpf], [tkinter], [java], [html5], [chart.js] etc. Also include a specific canvas tag such as [android-canvas], [html5-canvas], [tkinter-canvas] if appropriate.")
  tag12 = Tag(tag="arrays", description="An array is an ordered linear data structure consisting of a collection of elements (values, variables, or references), each identified by one or more indexes. When asking about specific variants of arrays, use these related tags instead: [vector], [arraylist], [matrix]. When using this tag, in a question that is specific to a programming language, tag the question with the programming language being used.")

  db.session.add(tag1)
  db.session.add(tag2)
  db.session.add(tag3)
  db.session.add(tag4)
  db.session.add(tag5)
  db.session.add(tag6)
  db.session.add(tag7)
  db.session.add(tag8)
  db.session.add(tag9)
  db.session.add(tag10)
  db.session.add(tag11)
  db.session.add(tag12)
  # question1.tags.append(tag9)
  # question2.tags.append(tag12)
  # question4.tags.append(tag5)
  # question4.tags.append(tag6)
  # question5.tags.append(tag1)
  # question5.tags.append(tag2)
  # question6.tags.append(tag7)
  # question7.tags.append(tag5)
  # question8.tags.append(tag9)
  # question8.tags.append(tag8)
  # question9.tags.append(tag12)
  # question10.tags.append(tag11)
  # question11.tags.append(tag10)
  # question12.tags.append(tag3)
  db.session.commit()

def undo_tags():
  if environment == "production":
        db.session.execute(f"TRUNCATE table {SCHEMA}.tags RESTART IDENTITY CASCADE;")
  else:
      db.session.execute("DELETE FROM tags")
      db.session.execute("DELETE FROM question_tags")

  db.session.commit()
